# This is a basic workflow to help you get started with Actions
name: Flutter CI

# Controls when the action will run.
on:
    # Triggers the workflow on push or pull request events but only for the master branch
    push:
        branches: [master]
    pull_request:
        branches: [master]

    # Allows you to run this workflow manually from the Actions tab
    workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
    # This workflow contains a single job called "build"
    build:
        # This job will run on ubuntu virtual machine
        runs-on: self-hosted

        # Steps represent a sequence of tasks that will be executed as part of the job
        steps:
            # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
            - name: Checkout Branch
              uses: actions/checkout@v2

            - name: Cancel Previous Builds
              uses: n1hility/cancel-previous-runs@v2
              with:
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Setup Java Action
              uses: actions/setup-java@v1
              with:
                  java-version: "12.x"

            - name: Setup Flutter Action
              uses: subosito/flutter-action@v1
              with:
                  channel: "stable"

            # Get flutter dependencies.
            - name: Get Dependencies
              run: flutter pub get

            # Clean dependencies.
            - name: Clean Dependencies
              run: flutter clean

            # Statically analyze the Dart code for any errors.
            - name: Analyze for Dart Errors
              run: flutter analyze .

            # TODO: Once tests are created, uncomment this
            # # Run widget tests for our flutter project.
            # - run: flutter test

            # Build for Android
            - name: Build for Android
              run: flutter build apk
